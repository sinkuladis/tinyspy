// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef PROTOBUF_INCLUDED_messages_2eproto
#define PROTOBUF_INCLUDED_messages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_messages_2eproto();
namespace tinyspy {
class AuthMsg;
class AuthMsgDefaultTypeInternal;
extern AuthMsgDefaultTypeInternal _AuthMsg_default_instance_;
class DataMsg;
class DataMsgDefaultTypeInternal;
extern DataMsgDefaultTypeInternal _DataMsg_default_instance_;
}  // namespace tinyspy
namespace google {
namespace protobuf {
template<> ::tinyspy::AuthMsg* Arena::CreateMaybeMessage<::tinyspy::AuthMsg>(Arena*);
template<> ::tinyspy::DataMsg* Arena::CreateMaybeMessage<::tinyspy::DataMsg>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace tinyspy {

// ===================================================================

class DataMsg :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinyspy.DataMsg) */ {
 public:
  DataMsg();
  virtual ~DataMsg();

  DataMsg(const DataMsg& from);

  inline DataMsg& operator=(const DataMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataMsg(DataMsg&& from) noexcept
    : DataMsg() {
    *this = ::std::move(from);
  }

  inline DataMsg& operator=(DataMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DataMsg& default_instance();

  enum DataCase {
    kFlag = 5,
    kNum = 6,
    kText = 7,
    kImage = 8,
    DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataMsg* internal_default_instance() {
    return reinterpret_cast<const DataMsg*>(
               &_DataMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(DataMsg* other);
  friend void swap(DataMsg& a, DataMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataMsg* New() const final {
    return CreateMaybeMessage<DataMsg>(nullptr);
  }

  DataMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DataMsg& from);
  void MergeFrom(const DataMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  ::google::protobuf::int32 request_id() const;
  void set_request_id(::google::protobuf::int32 value);

  // int32 agent_id = 2;
  void clear_agent_id();
  static const int kAgentIdFieldNumber = 2;
  ::google::protobuf::int32 agent_id() const;
  void set_agent_id(::google::protobuf::int32 value);

  // bool live_data = 3;
  void clear_live_data();
  static const int kLiveDataFieldNumber = 3;
  bool live_data() const;
  void set_live_data(bool value);

  // int32 session_token = 4;
  void clear_session_token();
  static const int kSessionTokenFieldNumber = 4;
  ::google::protobuf::int32 session_token() const;
  void set_session_token(::google::protobuf::int32 value);

  // bool flag = 5;
  private:
  bool has_flag() const;
  public:
  void clear_flag();
  static const int kFlagFieldNumber = 5;
  bool flag() const;
  void set_flag(bool value);

  // int32 num = 6;
  private:
  bool has_num() const;
  public:
  void clear_num();
  static const int kNumFieldNumber = 6;
  ::google::protobuf::int32 num() const;
  void set_num(::google::protobuf::int32 value);

  // string text = 7;
  private:
  bool has_text() const;
  public:
  void clear_text();
  static const int kTextFieldNumber = 7;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // bytes image = 8;
  private:
  bool has_image() const;
  public:
  void clear_image();
  static const int kImageFieldNumber = 8;
  const ::std::string& image() const;
  void set_image(const ::std::string& value);
  #if LANG_CXX11
  void set_image(::std::string&& value);
  #endif
  void set_image(const char* value);
  void set_image(const void* value, size_t size);
  ::std::string* mutable_image();
  ::std::string* release_image();
  void set_allocated_image(::std::string* image);

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:tinyspy.DataMsg)
 private:
  class HasBitSetters;
  void set_has_flag();
  void set_has_num();
  void set_has_text();
  void set_has_image();

  inline bool has_data() const;
  inline void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 request_id_;
  ::google::protobuf::int32 agent_id_;
  bool live_data_;
  ::google::protobuf::int32 session_token_;
  union DataUnion {
    DataUnion() {}
    bool flag_;
    ::google::protobuf::int32 num_;
    ::google::protobuf::internal::ArenaStringPtr text_;
    ::google::protobuf::internal::ArenaStringPtr image_;
  } data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class AuthMsg :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinyspy.AuthMsg) */ {
 public:
  AuthMsg();
  virtual ~AuthMsg();

  AuthMsg(const AuthMsg& from);

  inline AuthMsg& operator=(const AuthMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuthMsg(AuthMsg&& from) noexcept
    : AuthMsg() {
    *this = ::std::move(from);
  }

  inline AuthMsg& operator=(AuthMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AuthMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthMsg* internal_default_instance() {
    return reinterpret_cast<const AuthMsg*>(
               &_AuthMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(AuthMsg* other);
  friend void swap(AuthMsg& a, AuthMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthMsg* New() const final {
    return CreateMaybeMessage<AuthMsg>(nullptr);
  }

  AuthMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuthMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AuthMsg& from);
  void MergeFrom(const AuthMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string login = 1;
  void clear_login();
  static const int kLoginFieldNumber = 1;
  const ::std::string& login() const;
  void set_login(const ::std::string& value);
  #if LANG_CXX11
  void set_login(::std::string&& value);
  #endif
  void set_login(const char* value);
  void set_login(const char* value, size_t size);
  ::std::string* mutable_login();
  ::std::string* release_login();
  void set_allocated_login(::std::string* login);

  // string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:tinyspy.AuthMsg)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr login_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DataMsg

// int32 request_id = 1;
inline void DataMsg::clear_request_id() {
  request_id_ = 0;
}
inline ::google::protobuf::int32 DataMsg::request_id() const {
  // @@protoc_insertion_point(field_get:tinyspy.DataMsg.request_id)
  return request_id_;
}
inline void DataMsg::set_request_id(::google::protobuf::int32 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:tinyspy.DataMsg.request_id)
}

// int32 agent_id = 2;
inline void DataMsg::clear_agent_id() {
  agent_id_ = 0;
}
inline ::google::protobuf::int32 DataMsg::agent_id() const {
  // @@protoc_insertion_point(field_get:tinyspy.DataMsg.agent_id)
  return agent_id_;
}
inline void DataMsg::set_agent_id(::google::protobuf::int32 value) {
  
  agent_id_ = value;
  // @@protoc_insertion_point(field_set:tinyspy.DataMsg.agent_id)
}

// bool live_data = 3;
inline void DataMsg::clear_live_data() {
  live_data_ = false;
}
inline bool DataMsg::live_data() const {
  // @@protoc_insertion_point(field_get:tinyspy.DataMsg.live_data)
  return live_data_;
}
inline void DataMsg::set_live_data(bool value) {
  
  live_data_ = value;
  // @@protoc_insertion_point(field_set:tinyspy.DataMsg.live_data)
}

// int32 session_token = 4;
inline void DataMsg::clear_session_token() {
  session_token_ = 0;
}
inline ::google::protobuf::int32 DataMsg::session_token() const {
  // @@protoc_insertion_point(field_get:tinyspy.DataMsg.session_token)
  return session_token_;
}
inline void DataMsg::set_session_token(::google::protobuf::int32 value) {
  
  session_token_ = value;
  // @@protoc_insertion_point(field_set:tinyspy.DataMsg.session_token)
}

// bool flag = 5;
inline bool DataMsg::has_flag() const {
  return data_case() == kFlag;
}
inline void DataMsg::set_has_flag() {
  _oneof_case_[0] = kFlag;
}
inline void DataMsg::clear_flag() {
  if (has_flag()) {
    data_.flag_ = false;
    clear_has_data();
  }
}
inline bool DataMsg::flag() const {
  // @@protoc_insertion_point(field_get:tinyspy.DataMsg.flag)
  if (has_flag()) {
    return data_.flag_;
  }
  return false;
}
inline void DataMsg::set_flag(bool value) {
  if (!has_flag()) {
    clear_data();
    set_has_flag();
  }
  data_.flag_ = value;
  // @@protoc_insertion_point(field_set:tinyspy.DataMsg.flag)
}

// int32 num = 6;
inline bool DataMsg::has_num() const {
  return data_case() == kNum;
}
inline void DataMsg::set_has_num() {
  _oneof_case_[0] = kNum;
}
inline void DataMsg::clear_num() {
  if (has_num()) {
    data_.num_ = 0;
    clear_has_data();
  }
}
inline ::google::protobuf::int32 DataMsg::num() const {
  // @@protoc_insertion_point(field_get:tinyspy.DataMsg.num)
  if (has_num()) {
    return data_.num_;
  }
  return 0;
}
inline void DataMsg::set_num(::google::protobuf::int32 value) {
  if (!has_num()) {
    clear_data();
    set_has_num();
  }
  data_.num_ = value;
  // @@protoc_insertion_point(field_set:tinyspy.DataMsg.num)
}

// string text = 7;
inline bool DataMsg::has_text() const {
  return data_case() == kText;
}
inline void DataMsg::set_has_text() {
  _oneof_case_[0] = kText;
}
inline void DataMsg::clear_text() {
  if (has_text()) {
    data_.text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_data();
  }
}
inline const ::std::string& DataMsg::text() const {
  // @@protoc_insertion_point(field_get:tinyspy.DataMsg.text)
  if (has_text()) {
    return data_.text_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void DataMsg::set_text(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tinyspy.DataMsg.text)
  if (!has_text()) {
    clear_data();
    set_has_text();
    data_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tinyspy.DataMsg.text)
}
#if LANG_CXX11
inline void DataMsg::set_text(::std::string&& value) {
  // @@protoc_insertion_point(field_set:tinyspy.DataMsg.text)
  if (!has_text()) {
    clear_data();
    set_has_text();
    data_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tinyspy.DataMsg.text)
}
#endif
inline void DataMsg::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_text()) {
    clear_data();
    set_has_text();
    data_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tinyspy.DataMsg.text)
}
inline void DataMsg::set_text(const char* value, size_t size) {
  if (!has_text()) {
    clear_data();
    set_has_text();
    data_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tinyspy.DataMsg.text)
}
inline ::std::string* DataMsg::mutable_text() {
  if (!has_text()) {
    clear_data();
    set_has_text();
    data_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:tinyspy.DataMsg.text)
  return data_.text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataMsg::release_text() {
  // @@protoc_insertion_point(field_release:tinyspy.DataMsg.text)
  if (has_text()) {
    clear_has_data();
    return data_.text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void DataMsg::set_allocated_text(::std::string* text) {
  if (has_data()) {
    clear_data();
  }
  if (text != nullptr) {
    set_has_text();
    data_.text_.UnsafeSetDefault(text);
  }
  // @@protoc_insertion_point(field_set_allocated:tinyspy.DataMsg.text)
}

// bytes image = 8;
inline bool DataMsg::has_image() const {
  return data_case() == kImage;
}
inline void DataMsg::set_has_image() {
  _oneof_case_[0] = kImage;
}
inline void DataMsg::clear_image() {
  if (has_image()) {
    data_.image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_data();
  }
}
inline const ::std::string& DataMsg::image() const {
  // @@protoc_insertion_point(field_get:tinyspy.DataMsg.image)
  if (has_image()) {
    return data_.image_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void DataMsg::set_image(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tinyspy.DataMsg.image)
  if (!has_image()) {
    clear_data();
    set_has_image();
    data_.image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tinyspy.DataMsg.image)
}
#if LANG_CXX11
inline void DataMsg::set_image(::std::string&& value) {
  // @@protoc_insertion_point(field_set:tinyspy.DataMsg.image)
  if (!has_image()) {
    clear_data();
    set_has_image();
    data_.image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tinyspy.DataMsg.image)
}
#endif
inline void DataMsg::set_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_image()) {
    clear_data();
    set_has_image();
    data_.image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tinyspy.DataMsg.image)
}
inline void DataMsg::set_image(const void* value, size_t size) {
  if (!has_image()) {
    clear_data();
    set_has_image();
    data_.image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tinyspy.DataMsg.image)
}
inline ::std::string* DataMsg::mutable_image() {
  if (!has_image()) {
    clear_data();
    set_has_image();
    data_.image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:tinyspy.DataMsg.image)
  return data_.image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataMsg::release_image() {
  // @@protoc_insertion_point(field_release:tinyspy.DataMsg.image)
  if (has_image()) {
    clear_has_data();
    return data_.image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void DataMsg::set_allocated_image(::std::string* image) {
  if (has_data()) {
    clear_data();
  }
  if (image != nullptr) {
    set_has_image();
    data_.image_.UnsafeSetDefault(image);
  }
  // @@protoc_insertion_point(field_set_allocated:tinyspy.DataMsg.image)
}

inline bool DataMsg::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void DataMsg::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline DataMsg::DataCase DataMsg::data_case() const {
  return DataMsg::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AuthMsg

// string login = 1;
inline void AuthMsg::clear_login() {
  login_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthMsg::login() const {
  // @@protoc_insertion_point(field_get:tinyspy.AuthMsg.login)
  return login_.GetNoArena();
}
inline void AuthMsg::set_login(const ::std::string& value) {
  
  login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tinyspy.AuthMsg.login)
}
#if LANG_CXX11
inline void AuthMsg::set_login(::std::string&& value) {
  
  login_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tinyspy.AuthMsg.login)
}
#endif
inline void AuthMsg::set_login(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tinyspy.AuthMsg.login)
}
inline void AuthMsg::set_login(const char* value, size_t size) {
  
  login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tinyspy.AuthMsg.login)
}
inline ::std::string* AuthMsg::mutable_login() {
  
  // @@protoc_insertion_point(field_mutable:tinyspy.AuthMsg.login)
  return login_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthMsg::release_login() {
  // @@protoc_insertion_point(field_release:tinyspy.AuthMsg.login)
  
  return login_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthMsg::set_allocated_login(::std::string* login) {
  if (login != nullptr) {
    
  } else {
    
  }
  login_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), login);
  // @@protoc_insertion_point(field_set_allocated:tinyspy.AuthMsg.login)
}

// string password = 2;
inline void AuthMsg::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthMsg::password() const {
  // @@protoc_insertion_point(field_get:tinyspy.AuthMsg.password)
  return password_.GetNoArena();
}
inline void AuthMsg::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tinyspy.AuthMsg.password)
}
#if LANG_CXX11
inline void AuthMsg::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tinyspy.AuthMsg.password)
}
#endif
inline void AuthMsg::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tinyspy.AuthMsg.password)
}
inline void AuthMsg::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tinyspy.AuthMsg.password)
}
inline ::std::string* AuthMsg::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:tinyspy.AuthMsg.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthMsg::release_password() {
  // @@protoc_insertion_point(field_release:tinyspy.AuthMsg.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthMsg::set_allocated_password(::std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:tinyspy.AuthMsg.password)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tinyspy

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_messages_2eproto
